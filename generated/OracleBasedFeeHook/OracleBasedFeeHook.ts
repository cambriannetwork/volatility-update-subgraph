// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FeeUpdate extends ethereum.Event {
  get params(): FeeUpdate__Params {
    return new FeeUpdate__Params(this);
  }
}

export class FeeUpdate__Params {
  _event: FeeUpdate;

  constructor(event: FeeUpdate) {
    this._event = event;
  }

  get newFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OracleBasedFeeHook__afterAddLiquidityResult {
  value0: Bytes;
  value1: BigInt;

  constructor(value0: Bytes, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }

  getValue0(): Bytes {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class OracleBasedFeeHook__afterAddLiquidityInputParam1Struct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class OracleBasedFeeHook__afterAddLiquidityInputParam2Struct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt();
  }

  get salt(): Bytes {
    return this[3].toBytes();
  }
}

export class OracleBasedFeeHook__afterDonateInputParam1Struct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class OracleBasedFeeHook__afterInitializeInputParam1Struct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class OracleBasedFeeHook__afterRemoveLiquidityResult {
  value0: Bytes;
  value1: BigInt;

  constructor(value0: Bytes, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }

  getValue0(): Bytes {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class OracleBasedFeeHook__afterRemoveLiquidityInputParam1Struct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class OracleBasedFeeHook__afterRemoveLiquidityInputParam2Struct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt();
  }

  get salt(): Bytes {
    return this[3].toBytes();
  }
}

export class OracleBasedFeeHook__afterSwapResult {
  value0: Bytes;
  value1: BigInt;

  constructor(value0: Bytes, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }

  getValue0(): Bytes {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class OracleBasedFeeHook__afterSwapInputParam1Struct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class OracleBasedFeeHook__afterSwapInputParam2Struct extends ethereum.Tuple {
  get zeroForOne(): boolean {
    return this[0].toBoolean();
  }

  get amountSpecified(): BigInt {
    return this[1].toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[2].toBigInt();
  }
}

export class OracleBasedFeeHook__beforeAddLiquidityInputParam1Struct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class OracleBasedFeeHook__beforeAddLiquidityInputParam2Struct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt();
  }

  get salt(): Bytes {
    return this[3].toBytes();
  }
}

export class OracleBasedFeeHook__beforeDonateInputParam1Struct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class OracleBasedFeeHook__beforeInitializeInputKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class OracleBasedFeeHook__beforeRemoveLiquidityInputParam1Struct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class OracleBasedFeeHook__beforeRemoveLiquidityInputParam2Struct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt();
  }

  get salt(): Bytes {
    return this[3].toBytes();
  }
}

export class OracleBasedFeeHook__beforeSwapResult {
  value0: Bytes;
  value1: BigInt;
  value2: i32;

  constructor(value0: Bytes, value1: BigInt, value2: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    return map;
  }

  getValue0(): Bytes {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): i32 {
    return this.value2;
  }
}

export class OracleBasedFeeHook__beforeSwapInputKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class OracleBasedFeeHook__beforeSwapInputSwapDataStruct extends ethereum.Tuple {
  get zeroForOne(): boolean {
    return this[0].toBoolean();
  }

  get amountSpecified(): BigInt {
    return this[1].toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[2].toBigInt();
  }
}

export class OracleBasedFeeHook__getHookPermissionsResultValue0Struct extends ethereum.Tuple {
  get beforeInitialize(): boolean {
    return this[0].toBoolean();
  }

  get afterInitialize(): boolean {
    return this[1].toBoolean();
  }

  get beforeAddLiquidity(): boolean {
    return this[2].toBoolean();
  }

  get afterAddLiquidity(): boolean {
    return this[3].toBoolean();
  }

  get beforeRemoveLiquidity(): boolean {
    return this[4].toBoolean();
  }

  get afterRemoveLiquidity(): boolean {
    return this[5].toBoolean();
  }

  get beforeSwap(): boolean {
    return this[6].toBoolean();
  }

  get afterSwap(): boolean {
    return this[7].toBoolean();
  }

  get beforeDonate(): boolean {
    return this[8].toBoolean();
  }

  get afterDonate(): boolean {
    return this[9].toBoolean();
  }

  get beforeSwapReturnDelta(): boolean {
    return this[10].toBoolean();
  }

  get afterSwapReturnDelta(): boolean {
    return this[11].toBoolean();
  }

  get afterAddLiquidityReturnDelta(): boolean {
    return this[12].toBoolean();
  }

  get afterRemoveLiquidityReturnDelta(): boolean {
    return this[13].toBoolean();
  }
}

export class OracleBasedFeeHook extends ethereum.SmartContract {
  static bind(address: Address): OracleBasedFeeHook {
    return new OracleBasedFeeHook("OracleBasedFeeHook", address);
  }

  MIN_FEE(): BigInt {
    let result = super.call("MIN_FEE", "MIN_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MIN_FEE", "MIN_FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  afterAddLiquidity(
    param0: Address,
    param1: OracleBasedFeeHook__afterAddLiquidityInputParam1Struct,
    param2: OracleBasedFeeHook__afterAddLiquidityInputParam2Struct,
    param3: BigInt,
    param4: Bytes
  ): OracleBasedFeeHook__afterAddLiquidityResult {
    let result = super.call(
      "afterAddLiquidity",
      "afterAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,bytes):(bytes4,int256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(param1),
        ethereum.Value.fromTuple(param2),
        ethereum.Value.fromSignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return new OracleBasedFeeHook__afterAddLiquidityResult(
      result[0].toBytes(),
      result[1].toBigInt()
    );
  }

  try_afterAddLiquidity(
    param0: Address,
    param1: OracleBasedFeeHook__afterAddLiquidityInputParam1Struct,
    param2: OracleBasedFeeHook__afterAddLiquidityInputParam2Struct,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<OracleBasedFeeHook__afterAddLiquidityResult> {
    let result = super.tryCall(
      "afterAddLiquidity",
      "afterAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,bytes):(bytes4,int256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(param1),
        ethereum.Value.fromTuple(param2),
        ethereum.Value.fromSignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OracleBasedFeeHook__afterAddLiquidityResult(
        value[0].toBytes(),
        value[1].toBigInt()
      )
    );
  }

  afterDonate(
    param0: Address,
    param1: OracleBasedFeeHook__afterDonateInputParam1Struct,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "afterDonate",
      "afterDonate(address,(address,address,uint24,int24,address),uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_afterDonate(
    param0: Address,
    param1: OracleBasedFeeHook__afterDonateInputParam1Struct,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterDonate",
      "afterDonate(address,(address,address,uint24,int24,address),uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterInitialize(
    param0: Address,
    param1: OracleBasedFeeHook__afterInitializeInputParam1Struct,
    param2: BigInt,
    param3: i32,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "afterInitialize",
      "afterInitialize(address,(address,address,uint24,int24,address),uint160,int24,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromI32(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_afterInitialize(
    param0: Address,
    param1: OracleBasedFeeHook__afterInitializeInputParam1Struct,
    param2: BigInt,
    param3: i32,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterInitialize",
      "afterInitialize(address,(address,address,uint24,int24,address),uint160,int24,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromI32(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterRemoveLiquidity(
    param0: Address,
    param1: OracleBasedFeeHook__afterRemoveLiquidityInputParam1Struct,
    param2: OracleBasedFeeHook__afterRemoveLiquidityInputParam2Struct,
    param3: BigInt,
    param4: Bytes
  ): OracleBasedFeeHook__afterRemoveLiquidityResult {
    let result = super.call(
      "afterRemoveLiquidity",
      "afterRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,bytes):(bytes4,int256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(param1),
        ethereum.Value.fromTuple(param2),
        ethereum.Value.fromSignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return new OracleBasedFeeHook__afterRemoveLiquidityResult(
      result[0].toBytes(),
      result[1].toBigInt()
    );
  }

  try_afterRemoveLiquidity(
    param0: Address,
    param1: OracleBasedFeeHook__afterRemoveLiquidityInputParam1Struct,
    param2: OracleBasedFeeHook__afterRemoveLiquidityInputParam2Struct,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<OracleBasedFeeHook__afterRemoveLiquidityResult> {
    let result = super.tryCall(
      "afterRemoveLiquidity",
      "afterRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,bytes):(bytes4,int256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(param1),
        ethereum.Value.fromTuple(param2),
        ethereum.Value.fromSignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OracleBasedFeeHook__afterRemoveLiquidityResult(
        value[0].toBytes(),
        value[1].toBigInt()
      )
    );
  }

  afterSwap(
    param0: Address,
    param1: OracleBasedFeeHook__afterSwapInputParam1Struct,
    param2: OracleBasedFeeHook__afterSwapInputParam2Struct,
    param3: BigInt,
    param4: Bytes
  ): OracleBasedFeeHook__afterSwapResult {
    let result = super.call(
      "afterSwap",
      "afterSwap(address,(address,address,uint24,int24,address),(bool,int256,uint160),int256,bytes):(bytes4,int128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(param1),
        ethereum.Value.fromTuple(param2),
        ethereum.Value.fromSignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return new OracleBasedFeeHook__afterSwapResult(
      result[0].toBytes(),
      result[1].toBigInt()
    );
  }

  try_afterSwap(
    param0: Address,
    param1: OracleBasedFeeHook__afterSwapInputParam1Struct,
    param2: OracleBasedFeeHook__afterSwapInputParam2Struct,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<OracleBasedFeeHook__afterSwapResult> {
    let result = super.tryCall(
      "afterSwap",
      "afterSwap(address,(address,address,uint24,int24,address),(bool,int256,uint160),int256,bytes):(bytes4,int128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(param1),
        ethereum.Value.fromTuple(param2),
        ethereum.Value.fromSignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OracleBasedFeeHook__afterSwapResult(
        value[0].toBytes(),
        value[1].toBigInt()
      )
    );
  }

  beforeAddLiquidity(
    param0: Address,
    param1: OracleBasedFeeHook__beforeAddLiquidityInputParam1Struct,
    param2: OracleBasedFeeHook__beforeAddLiquidityInputParam2Struct,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "beforeAddLiquidity",
      "beforeAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(param1),
        ethereum.Value.fromTuple(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeAddLiquidity(
    param0: Address,
    param1: OracleBasedFeeHook__beforeAddLiquidityInputParam1Struct,
    param2: OracleBasedFeeHook__beforeAddLiquidityInputParam2Struct,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAddLiquidity",
      "beforeAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(param1),
        ethereum.Value.fromTuple(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeDonate(
    param0: Address,
    param1: OracleBasedFeeHook__beforeDonateInputParam1Struct,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "beforeDonate",
      "beforeDonate(address,(address,address,uint24,int24,address),uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeDonate(
    param0: Address,
    param1: OracleBasedFeeHook__beforeDonateInputParam1Struct,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeDonate",
      "beforeDonate(address,(address,address,uint24,int24,address),uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeInitialize(
    param0: Address,
    key: OracleBasedFeeHook__beforeInitializeInputKeyStruct,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "beforeInitialize",
      "beforeInitialize(address,(address,address,uint24,int24,address),uint160,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeInitialize(
    param0: Address,
    key: OracleBasedFeeHook__beforeInitializeInputKeyStruct,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeInitialize",
      "beforeInitialize(address,(address,address,uint24,int24,address),uint160,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeRemoveLiquidity(
    param0: Address,
    param1: OracleBasedFeeHook__beforeRemoveLiquidityInputParam1Struct,
    param2: OracleBasedFeeHook__beforeRemoveLiquidityInputParam2Struct,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "beforeRemoveLiquidity",
      "beforeRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(param1),
        ethereum.Value.fromTuple(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeRemoveLiquidity(
    param0: Address,
    param1: OracleBasedFeeHook__beforeRemoveLiquidityInputParam1Struct,
    param2: OracleBasedFeeHook__beforeRemoveLiquidityInputParam2Struct,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeRemoveLiquidity",
      "beforeRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(param1),
        ethereum.Value.fromTuple(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeSwap(
    param0: Address,
    key: OracleBasedFeeHook__beforeSwapInputKeyStruct,
    swapData: OracleBasedFeeHook__beforeSwapInputSwapDataStruct,
    param3: Bytes
  ): OracleBasedFeeHook__beforeSwapResult {
    let result = super.call(
      "beforeSwap",
      "beforeSwap(address,(address,address,uint24,int24,address),(bool,int256,uint160),bytes):(bytes4,int256,uint24)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromTuple(swapData),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return new OracleBasedFeeHook__beforeSwapResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      result[2].toI32()
    );
  }

  try_beforeSwap(
    param0: Address,
    key: OracleBasedFeeHook__beforeSwapInputKeyStruct,
    swapData: OracleBasedFeeHook__beforeSwapInputSwapDataStruct,
    param3: Bytes
  ): ethereum.CallResult<OracleBasedFeeHook__beforeSwapResult> {
    let result = super.tryCall(
      "beforeSwap",
      "beforeSwap(address,(address,address,uint24,int24,address),(bool,int256,uint160),bytes):(bytes4,int256,uint24)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromTuple(swapData),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OracleBasedFeeHook__beforeSwapResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        value[2].toI32()
      )
    );
  }

  calcLib(): Address {
    let result = super.call("calcLib", "calcLib():(address)", []);

    return result[0].toAddress();
  }

  try_calcLib(): ethereum.CallResult<Address> {
    let result = super.tryCall("calcLib", "calcLib():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getHookPermissions(): OracleBasedFeeHook__getHookPermissionsResultValue0Struct {
    let result = super.call(
      "getHookPermissions",
      "getHookPermissions():((bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))",
      []
    );

    return changetype<OracleBasedFeeHook__getHookPermissionsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getHookPermissions(): ethereum.CallResult<
    OracleBasedFeeHook__getHookPermissionsResultValue0Struct
  > {
    let result = super.tryCall(
      "getHookPermissions",
      "getHookPermissions():((bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<OracleBasedFeeHook__getHookPermissionsResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolManager(): Address {
    let result = super.call("poolManager", "poolManager():(address)", []);

    return result[0].toAddress();
  }

  try_poolManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolManager", "poolManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unlockCallback(data: Bytes): Bytes {
    let result = super.call("unlockCallback", "unlockCallback(bytes):(bytes)", [
      ethereum.Value.fromBytes(data)
    ]);

    return result[0].toBytes();
  }

  try_unlockCallback(data: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "unlockCallback",
      "unlockCallback(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _poolManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _calcLib(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AfterAddLiquidityCall extends ethereum.Call {
  get inputs(): AfterAddLiquidityCall__Inputs {
    return new AfterAddLiquidityCall__Inputs(this);
  }

  get outputs(): AfterAddLiquidityCall__Outputs {
    return new AfterAddLiquidityCall__Outputs(this);
  }
}

export class AfterAddLiquidityCall__Inputs {
  _call: AfterAddLiquidityCall;

  constructor(call: AfterAddLiquidityCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): AfterAddLiquidityCallValue1Struct {
    return changetype<AfterAddLiquidityCallValue1Struct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get value2(): AfterAddLiquidityCallValue2Struct {
    return changetype<AfterAddLiquidityCallValue2Struct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class AfterAddLiquidityCall__Outputs {
  _call: AfterAddLiquidityCall;

  constructor(call: AfterAddLiquidityCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class AfterAddLiquidityCallValue1Struct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class AfterAddLiquidityCallValue2Struct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt();
  }

  get salt(): Bytes {
    return this[3].toBytes();
  }
}

export class AfterDonateCall extends ethereum.Call {
  get inputs(): AfterDonateCall__Inputs {
    return new AfterDonateCall__Inputs(this);
  }

  get outputs(): AfterDonateCall__Outputs {
    return new AfterDonateCall__Outputs(this);
  }
}

export class AfterDonateCall__Inputs {
  _call: AfterDonateCall;

  constructor(call: AfterDonateCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): AfterDonateCallValue1Struct {
    return changetype<AfterDonateCallValue1Struct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class AfterDonateCall__Outputs {
  _call: AfterDonateCall;

  constructor(call: AfterDonateCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AfterDonateCallValue1Struct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class AfterInitializeCall extends ethereum.Call {
  get inputs(): AfterInitializeCall__Inputs {
    return new AfterInitializeCall__Inputs(this);
  }

  get outputs(): AfterInitializeCall__Outputs {
    return new AfterInitializeCall__Outputs(this);
  }
}

export class AfterInitializeCall__Inputs {
  _call: AfterInitializeCall;

  constructor(call: AfterInitializeCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): AfterInitializeCallValue1Struct {
    return changetype<AfterInitializeCallValue1Struct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class AfterInitializeCall__Outputs {
  _call: AfterInitializeCall;

  constructor(call: AfterInitializeCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AfterInitializeCallValue1Struct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class AfterRemoveLiquidityCall extends ethereum.Call {
  get inputs(): AfterRemoveLiquidityCall__Inputs {
    return new AfterRemoveLiquidityCall__Inputs(this);
  }

  get outputs(): AfterRemoveLiquidityCall__Outputs {
    return new AfterRemoveLiquidityCall__Outputs(this);
  }
}

export class AfterRemoveLiquidityCall__Inputs {
  _call: AfterRemoveLiquidityCall;

  constructor(call: AfterRemoveLiquidityCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): AfterRemoveLiquidityCallValue1Struct {
    return changetype<AfterRemoveLiquidityCallValue1Struct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get value2(): AfterRemoveLiquidityCallValue2Struct {
    return changetype<AfterRemoveLiquidityCallValue2Struct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class AfterRemoveLiquidityCall__Outputs {
  _call: AfterRemoveLiquidityCall;

  constructor(call: AfterRemoveLiquidityCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class AfterRemoveLiquidityCallValue1Struct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class AfterRemoveLiquidityCallValue2Struct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt();
  }

  get salt(): Bytes {
    return this[3].toBytes();
  }
}

export class AfterSwapCall extends ethereum.Call {
  get inputs(): AfterSwapCall__Inputs {
    return new AfterSwapCall__Inputs(this);
  }

  get outputs(): AfterSwapCall__Outputs {
    return new AfterSwapCall__Outputs(this);
  }
}

export class AfterSwapCall__Inputs {
  _call: AfterSwapCall;

  constructor(call: AfterSwapCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): AfterSwapCallValue1Struct {
    return changetype<AfterSwapCallValue1Struct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get value2(): AfterSwapCallValue2Struct {
    return changetype<AfterSwapCallValue2Struct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class AfterSwapCall__Outputs {
  _call: AfterSwapCall;

  constructor(call: AfterSwapCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class AfterSwapCallValue1Struct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class AfterSwapCallValue2Struct extends ethereum.Tuple {
  get zeroForOne(): boolean {
    return this[0].toBoolean();
  }

  get amountSpecified(): BigInt {
    return this[1].toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[2].toBigInt();
  }
}

export class BeforeAddLiquidityCall extends ethereum.Call {
  get inputs(): BeforeAddLiquidityCall__Inputs {
    return new BeforeAddLiquidityCall__Inputs(this);
  }

  get outputs(): BeforeAddLiquidityCall__Outputs {
    return new BeforeAddLiquidityCall__Outputs(this);
  }
}

export class BeforeAddLiquidityCall__Inputs {
  _call: BeforeAddLiquidityCall;

  constructor(call: BeforeAddLiquidityCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): BeforeAddLiquidityCallValue1Struct {
    return changetype<BeforeAddLiquidityCallValue1Struct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get value2(): BeforeAddLiquidityCallValue2Struct {
    return changetype<BeforeAddLiquidityCallValue2Struct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class BeforeAddLiquidityCall__Outputs {
  _call: BeforeAddLiquidityCall;

  constructor(call: BeforeAddLiquidityCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class BeforeAddLiquidityCallValue1Struct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class BeforeAddLiquidityCallValue2Struct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt();
  }

  get salt(): Bytes {
    return this[3].toBytes();
  }
}

export class BeforeDonateCall extends ethereum.Call {
  get inputs(): BeforeDonateCall__Inputs {
    return new BeforeDonateCall__Inputs(this);
  }

  get outputs(): BeforeDonateCall__Outputs {
    return new BeforeDonateCall__Outputs(this);
  }
}

export class BeforeDonateCall__Inputs {
  _call: BeforeDonateCall;

  constructor(call: BeforeDonateCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): BeforeDonateCallValue1Struct {
    return changetype<BeforeDonateCallValue1Struct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class BeforeDonateCall__Outputs {
  _call: BeforeDonateCall;

  constructor(call: BeforeDonateCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class BeforeDonateCallValue1Struct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class BeforeRemoveLiquidityCall extends ethereum.Call {
  get inputs(): BeforeRemoveLiquidityCall__Inputs {
    return new BeforeRemoveLiquidityCall__Inputs(this);
  }

  get outputs(): BeforeRemoveLiquidityCall__Outputs {
    return new BeforeRemoveLiquidityCall__Outputs(this);
  }
}

export class BeforeRemoveLiquidityCall__Inputs {
  _call: BeforeRemoveLiquidityCall;

  constructor(call: BeforeRemoveLiquidityCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): BeforeRemoveLiquidityCallValue1Struct {
    return changetype<BeforeRemoveLiquidityCallValue1Struct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get value2(): BeforeRemoveLiquidityCallValue2Struct {
    return changetype<BeforeRemoveLiquidityCallValue2Struct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class BeforeRemoveLiquidityCall__Outputs {
  _call: BeforeRemoveLiquidityCall;

  constructor(call: BeforeRemoveLiquidityCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class BeforeRemoveLiquidityCallValue1Struct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class BeforeRemoveLiquidityCallValue2Struct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt();
  }

  get salt(): Bytes {
    return this[3].toBytes();
  }
}

export class BeforeSwapCall extends ethereum.Call {
  get inputs(): BeforeSwapCall__Inputs {
    return new BeforeSwapCall__Inputs(this);
  }

  get outputs(): BeforeSwapCall__Outputs {
    return new BeforeSwapCall__Outputs(this);
  }
}

export class BeforeSwapCall__Inputs {
  _call: BeforeSwapCall;

  constructor(call: BeforeSwapCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get key(): BeforeSwapCallKeyStruct {
    return changetype<BeforeSwapCallKeyStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get swapData(): BeforeSwapCallSwapDataStruct {
    return changetype<BeforeSwapCallSwapDataStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class BeforeSwapCall__Outputs {
  _call: BeforeSwapCall;

  constructor(call: BeforeSwapCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get value2(): i32 {
    return this._call.outputValues[2].value.toI32();
  }
}

export class BeforeSwapCallKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class BeforeSwapCallSwapDataStruct extends ethereum.Tuple {
  get zeroForOne(): boolean {
    return this[0].toBoolean();
  }

  get amountSpecified(): BigInt {
    return this[1].toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[2].toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCalcLibCall extends ethereum.Call {
  get inputs(): SetCalcLibCall__Inputs {
    return new SetCalcLibCall__Inputs(this);
  }

  get outputs(): SetCalcLibCall__Outputs {
    return new SetCalcLibCall__Outputs(this);
  }
}

export class SetCalcLibCall__Inputs {
  _call: SetCalcLibCall;

  constructor(call: SetCalcLibCall) {
    this._call = call;
  }

  get _calcLib(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCalcLibCall__Outputs {
  _call: SetCalcLibCall;

  constructor(call: SetCalcLibCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnlockCallbackCall extends ethereum.Call {
  get inputs(): UnlockCallbackCall__Inputs {
    return new UnlockCallbackCall__Inputs(this);
  }

  get outputs(): UnlockCallbackCall__Outputs {
    return new UnlockCallbackCall__Outputs(this);
  }
}

export class UnlockCallbackCall__Inputs {
  _call: UnlockCallbackCall;

  constructor(call: UnlockCallbackCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class UnlockCallbackCall__Outputs {
  _call: UnlockCallbackCall;

  constructor(call: UnlockCallbackCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}
