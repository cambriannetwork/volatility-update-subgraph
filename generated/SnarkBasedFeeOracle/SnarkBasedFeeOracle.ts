// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class VolatilityUpdated extends ethereum.Event {
  get params(): VolatilityUpdated__Params {
    return new VolatilityUpdated__Params(this);
  }
}

export class VolatilityUpdated__Params {
  _event: VolatilityUpdated;

  constructor(event: VolatilityUpdated) {
    this._event = event;
  }

  get newRv(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SnarkBasedFeeOracle__verifyRvProofResult {
  value0: Bytes;
  value1: Bytes;
  value2: Bytes;
  value3: Bytes;
  value4: Bytes;

  constructor(
    value0: Bytes,
    value1: Bytes,
    value2: Bytes,
    value3: Bytes,
    value4: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    map.set("value4", ethereum.Value.fromFixedBytes(this.value4));
    return map;
  }

  getValue0(): Bytes {
    return this.value0;
  }

  getValue1(): Bytes {
    return this.value1;
  }

  getValue2(): Bytes {
    return this.value2;
  }

  getValue3(): Bytes {
    return this.value3;
  }

  getValue4(): Bytes {
    return this.value4;
  }
}

export class SnarkBasedFeeOracle extends ethereum.SmartContract {
  static bind(address: Address): SnarkBasedFeeOracle {
    return new SnarkBasedFeeOracle("SnarkBasedFeeOracle", address);
  }

  VERSION(): string {
    let result = super.call("VERSION", "VERSION():(string)", []);

    return result[0].toString();
  }

  try_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall("VERSION", "VERSION():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  Verify(proof: Bytes, public_inputs: Array<BigInt>): boolean {
    let result = super.call("Verify", "Verify(bytes,uint256[]):(bool)", [
      ethereum.Value.fromBytes(proof),
      ethereum.Value.fromUnsignedBigIntArray(public_inputs)
    ]);

    return result[0].toBoolean();
  }

  try_Verify(
    proof: Bytes,
    public_inputs: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("Verify", "Verify(bytes,uint256[]):(bool)", [
      ethereum.Value.fromBytes(proof),
      ethereum.Value.fromUnsignedBigIntArray(public_inputs)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fraction_bits(): BigInt {
    let result = super.call("fraction_bits", "fraction_bits():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fraction_bits(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fraction_bits",
      "fraction_bits():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPrice(): BigInt {
    let result = super.call("getPrice", "getPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPrice", "getPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVolatility(): BigInt {
    let result = super.call("getVolatility", "getVolatility():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getVolatility(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVolatility",
      "getVolatility():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hashPublicValues(publicValues: Bytes): Bytes {
    let result = super.call(
      "hashPublicValues",
      "hashPublicValues(bytes):(bytes32)",
      [ethereum.Value.fromBytes(publicValues)]
    );

    return result[0].toBytes();
  }

  try_hashPublicValues(publicValues: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashPublicValues",
      "hashPublicValues(bytes):(bytes32)",
      [ethereum.Value.fromBytes(publicValues)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ln_1_0001(): BigInt {
    let result = super.call("ln_1_0001", "ln_1_0001():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ln_1_0001(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ln_1_0001", "ln_1_0001():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  n1_check(n_bytes: Bytes, n1_inv: Bytes): boolean {
    let result = super.call("n1_check", "n1_check(bytes8,bytes8):(bool)", [
      ethereum.Value.fromFixedBytes(n_bytes),
      ethereum.Value.fromFixedBytes(n1_inv)
    ]);

    return result[0].toBoolean();
  }

  try_n1_check(n_bytes: Bytes, n1_inv: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("n1_check", "n1_check(bytes8,bytes8):(bool)", [
      ethereum.Value.fromFixedBytes(n_bytes),
      ethereum.Value.fromFixedBytes(n1_inv)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  n_sqrt_test(n_inv_sqrt: Bytes, n_bytes: Bytes): boolean {
    let result = super.call(
      "n_sqrt_test",
      "n_sqrt_test(bytes8,bytes8):(bool)",
      [
        ethereum.Value.fromFixedBytes(n_inv_sqrt),
        ethereum.Value.fromFixedBytes(n_bytes)
      ]
    );

    return result[0].toBoolean();
  }

  try_n_sqrt_test(
    n_inv_sqrt: Bytes,
    n_bytes: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "n_sqrt_test",
      "n_sqrt_test(bytes8,bytes8):(bool)",
      [
        ethereum.Value.fromFixedBytes(n_inv_sqrt),
        ethereum.Value.fromFixedBytes(n_bytes)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  price(): BigInt {
    let result = super.call("price", "price():(uint256)", []);

    return result[0].toBigInt();
  }

  try_price(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("price", "price():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  programKey(): Bytes {
    let result = super.call("programKey", "programKey():(bytes32)", []);

    return result[0].toBytes();
  }

  try_programKey(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("programKey", "programKey():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  rv(): BigInt {
    let result = super.call("rv", "rv():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rv(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rv", "rv():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  s(): BigInt {
    let result = super.call("s", "s():(uint256)", []);

    return result[0].toBigInt();
  }

  try_s(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("s", "s():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  s2_check(claimed_s: BigInt, new_s2: Bytes): boolean {
    let result = super.call("s2_check", "s2_check(uint256,bytes8):(bool)", [
      ethereum.Value.fromUnsignedBigInt(claimed_s),
      ethereum.Value.fromFixedBytes(new_s2)
    ]);

    return result[0].toBoolean();
  }

  try_s2_check(claimed_s: BigInt, new_s2: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("s2_check", "s2_check(uint256,bytes8):(bool)", [
      ethereum.Value.fromUnsignedBigInt(claimed_s),
      ethereum.Value.fromFixedBytes(new_s2)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  verifyRvProof(
    proof: Bytes,
    publicValues: Bytes
  ): SnarkBasedFeeOracle__verifyRvProofResult {
    let result = super.call(
      "verifyRvProof",
      "verifyRvProof(bytes,bytes):(bytes8,bytes8,bytes8,bytes8,bytes32)",
      [ethereum.Value.fromBytes(proof), ethereum.Value.fromBytes(publicValues)]
    );

    return new SnarkBasedFeeOracle__verifyRvProofResult(
      result[0].toBytes(),
      result[1].toBytes(),
      result[2].toBytes(),
      result[3].toBytes(),
      result[4].toBytes()
    );
  }

  try_verifyRvProof(
    proof: Bytes,
    publicValues: Bytes
  ): ethereum.CallResult<SnarkBasedFeeOracle__verifyRvProofResult> {
    let result = super.tryCall(
      "verifyRvProof",
      "verifyRvProof(bytes,bytes):(bytes8,bytes8,bytes8,bytes8,bytes32)",
      [ethereum.Value.fromBytes(proof), ethereum.Value.fromBytes(publicValues)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SnarkBasedFeeOracle__verifyRvProofResult(
        value[0].toBytes(),
        value[1].toBytes(),
        value[2].toBytes(),
        value[3].toBytes(),
        value[4].toBytes()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _programKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetPriceCall extends ethereum.Call {
  get inputs(): SetPriceCall__Inputs {
    return new SetPriceCall__Inputs(this);
  }

  get outputs(): SetPriceCall__Outputs {
    return new SetPriceCall__Outputs(this);
  }
}

export class SetPriceCall__Inputs {
  _call: SetPriceCall;

  constructor(call: SetPriceCall) {
    this._call = call;
  }

  get _price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPriceCall__Outputs {
  _call: SetPriceCall;

  constructor(call: SetPriceCall) {
    this._call = call;
  }
}

export class SetProgramKeyCall extends ethereum.Call {
  get inputs(): SetProgramKeyCall__Inputs {
    return new SetProgramKeyCall__Inputs(this);
  }

  get outputs(): SetProgramKeyCall__Outputs {
    return new SetProgramKeyCall__Outputs(this);
  }
}

export class SetProgramKeyCall__Inputs {
  _call: SetProgramKeyCall;

  constructor(call: SetProgramKeyCall) {
    this._call = call;
  }

  get _programKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetProgramKeyCall__Outputs {
  _call: SetProgramKeyCall;

  constructor(call: SetProgramKeyCall) {
    this._call = call;
  }
}

export class SetVolatilityCall extends ethereum.Call {
  get inputs(): SetVolatilityCall__Inputs {
    return new SetVolatilityCall__Inputs(this);
  }

  get outputs(): SetVolatilityCall__Outputs {
    return new SetVolatilityCall__Outputs(this);
  }
}

export class SetVolatilityCall__Inputs {
  _call: SetVolatilityCall;

  constructor(call: SetVolatilityCall) {
    this._call = call;
  }

  get _rv(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVolatilityCall__Outputs {
  _call: SetVolatilityCall;

  constructor(call: SetVolatilityCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class VerifyAndUpdateCall extends ethereum.Call {
  get inputs(): VerifyAndUpdateCall__Inputs {
    return new VerifyAndUpdateCall__Inputs(this);
  }

  get outputs(): VerifyAndUpdateCall__Outputs {
    return new VerifyAndUpdateCall__Outputs(this);
  }
}

export class VerifyAndUpdateCall__Inputs {
  _call: VerifyAndUpdateCall;

  constructor(call: VerifyAndUpdateCall) {
    this._call = call;
  }

  get claimed_s(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get proof(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get publicValues(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class VerifyAndUpdateCall__Outputs {
  _call: VerifyAndUpdateCall;

  constructor(call: VerifyAndUpdateCall) {
    this._call = call;
  }
}
